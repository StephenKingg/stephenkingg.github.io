<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Good to Great</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://StephenKingg.github.io/"/>
  <updated>2017-04-17T15:21:33.193Z</updated>
  <id>https://StephenKingg.github.io/</id>
  
  <author>
    <name>Stephen King</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>解决微信内置浏览器location.href和reload刷新失效的问题</title>
    <link href="https://StephenKingg.github.io/2016/11/02/%E8%A7%A3%E5%86%B3%E5%BE%AE%E4%BF%A1%E5%86%85%E7%BD%AE%E6%B5%8F%E8%A7%88%E5%99%A8location.href%E5%92%8Creload%E5%88%B7%E6%96%B0%E5%A4%B1%E6%95%88%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>https://StephenKingg.github.io/2016/11/02/解决微信内置浏览器location.href和reload刷新失效的问题/</id>
    <published>2016-11-02T07:30:28.000Z</published>
    <updated>2017-04-17T15:21:33.193Z</updated>
    
    <content type="html"><![CDATA[<p><code>location.reload()</code>和<code>location.href</code>是常用的刷新页面的方法，但是在Android微信内置浏览器中就失效了。<br><a id="more"></a><br>当我们想通过点击页面中的一个按钮或者链接来刷新页面时，我们通常会用<code>location.reload()</code>或者<code>location.href = &#39;current url&#39;</code>来实现页面刷新。但是此方法在Android微信内置浏览器中会失效，而在其他浏览器（不管是PC还是mobile）以及iOS微信内置浏览器中都没有这个问题，初步推断是Android微信内置浏览器缓存了当前页面的URL。</p>
<p>为了解决此类问题，我们可以在URL中添加时间戳或者随机数。由于只有Android微信内置浏览器才有这个BUG，我们先要判断当前打开页面的浏览器是否为Android微信内置浏览器。如果是，再向URL中添加时间戳或随机数。</p>
<p>在这里，我用添加时间戳的方式来实现：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isAndroidWechat</span>(<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">  <span class="comment">// 第一个条件用来判断是否为Android系统，第二个用来判断是否为微信</span></div><div class="line">  <span class="keyword">return</span> (<span class="regexp">/android/</span>.test(navigator.userAgent.toLowerCase()) &amp;&amp;</div><div class="line">    <span class="regexp">/micromessenger/</span>.test(navigator.userAgent.toLowerCase()));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateURL</span>(<span class="params">url, args, hash</span>) </span>&#123;</div><div class="line"></div><div class="line">  <span class="comment">// 时间戳参数，默认是"t"</span></div><div class="line">  <span class="keyword">let</span> key = (args || <span class="string">'t'</span>) + <span class="string">'='</span>;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * 如果使用路由（比如react-router）跳转并刷新，</div><div class="line">   * 则需要将目标hash也传递过来（比如event.currentTarget.hash），</div><div class="line">   * 一般用不到这个参数，可直接省略</div><div class="line">   */</div><div class="line">  <span class="keyword">let</span> router = hash || location.hash;</div><div class="line"></div><div class="line">  <span class="comment">// 匹配规则</span></div><div class="line">  <span class="keyword">const</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(key + <span class="string">'\\d+'</span>);</div><div class="line"></div><div class="line">  <span class="comment">// 获取当前时间</span></div><div class="line">  <span class="keyword">let</span> timestamp = +<span class="keyword">new</span> <span class="built_in">Date</span>();</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (url.indexOf(key) &gt; <span class="number">-1</span>) &#123;</div><div class="line"></div><div class="line">    <span class="comment">// 如果有时间戳，则直接更新</span></div><div class="line">    <span class="keyword">return</span> url.replace(reg, key + timestamp);</div><div class="line"></div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line"></div><div class="line">    <span class="comment">// 如果没有时间戳，则加上时间戳</span></div><div class="line">    <span class="keyword">if</span> (url.indexOf(<span class="string">'\?'</span>) &gt; <span class="number">-1</span>) &#123;</div><div class="line">      <span class="keyword">let</span> urlArr = url.split(<span class="string">'\?'</span>);</div><div class="line"></div><div class="line">      <span class="keyword">if</span> (urlArr[<span class="number">1</span>]) &#123;</div><div class="line">        <span class="keyword">return</span> urlArr[<span class="number">0</span>] + <span class="string">'?'</span> + key + timestamp + <span class="string">'&amp;'</span> + urlArr[<span class="number">1</span>];</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> urlArr[<span class="number">0</span>] + <span class="string">'?'</span> + key + timestamp;</div><div class="line">      &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line"></div><div class="line">      <span class="comment">// 使用hash路由的情况</span></div><div class="line">      <span class="keyword">if</span> (url.indexOf(<span class="string">'#'</span>) &gt; <span class="number">-1</span>) &#123;</div><div class="line">        <span class="keyword">return</span> url.split(<span class="string">'#'</span>)[<span class="number">0</span>] + <span class="string">'?'</span> + key + timestamp + router;</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> url + <span class="string">'?'</span> + key + timestamp;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">reloadPage</span>(<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (isAndroidWechat()) &#123;</div><div class="line"></div><div class="line">    <span class="comment">// 先添加时间戳</span></div><div class="line">    location.href = updateURL(location.href);</div><div class="line"></div><div class="line">    <span class="comment">// 然后强制刷新</span></div><div class="line">    location.reload(<span class="literal">true</span>);</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line"></div><div class="line">    <span class="comment">// 直接强制刷新</span></div><div class="line">    location.reload(<span class="literal">true</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 当使用react-router路由跳转到子页面时，</div><div class="line"> * 或者类似的跳转需要重新刷新页面来达到重新渲染组件的目的，</div><div class="line"> * 也需要添加时间戳或随机数。</div><div class="line"> *</div><div class="line"> * 由于该问题是react-router引起的，</div><div class="line"> * 与Android微信内置浏览器URL缓存类似，</div><div class="line"> * 所以也可以用这个方法</div><div class="line"> *</div><div class="line"> * 这个问题大家可以忽略，只使用上面的reloadPage即可</div><div class="line">    function reloadPage(event) &#123;</div><div class="line">      // 阻止默认行为</div><div class="line">      event.preventDefault();</div><div class="line"></div><div class="line">      // 先添加时间戳</div><div class="line">      location.href = updateURL(location.href);</div><div class="line"></div><div class="line">      // 然后强制刷新</div><div class="line">      location.reload(true);</div><div class="line">    &#125;</div><div class="line"> */</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;location.reload()&lt;/code&gt;和&lt;code&gt;location.href&lt;/code&gt;是常用的刷新页面的方法，但是在Android微信内置浏览器中就失效了。&lt;br&gt;
    
    </summary>
    
    
      <category term="微信" scheme="https://StephenKingg.github.io/tags/%E5%BE%AE%E4%BF%A1/"/>
    
      <category term="微信内置浏览器" scheme="https://StephenKingg.github.io/tags/%E5%BE%AE%E4%BF%A1%E5%86%85%E7%BD%AE%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
      <category term="刷新" scheme="https://StephenKingg.github.io/tags/%E5%88%B7%E6%96%B0/"/>
    
      <category term="location.reload" scheme="https://StephenKingg.github.io/tags/location-reload/"/>
    
      <category term="location.href" scheme="https://StephenKingg.github.io/tags/location-href/"/>
    
  </entry>
  
  <entry>
    <title>网页设计中的字体设定</title>
    <link href="https://StephenKingg.github.io/2016/10/27/web-font/"/>
    <id>https://StephenKingg.github.io/2016/10/27/web-font/</id>
    <published>2016-10-27T06:00:00.000Z</published>
    <updated>2017-04-17T15:21:33.176Z</updated>
    
    <content type="html"><![CDATA[<p>引言：不同的平台（Windows、Mac OS、Linux、Android、iOS）预装的字体各不相同，浏览器默认显示的字体效果也不尽相同。使用CSS的<code>font-family</code>属性可以指定相应的字体，以便在网页设计中达到较好的字体显示效果。<br><a id="more"></a></p>
<h2 id="1-font-family"><a href="#1-font-family" class="headerlink" title="1. font-family"></a>1. font-family</h2><p>首先通过一个例子来认识一下CSS的<code>font-family</code>属性：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line">  <span class="attribute">font-family</span>: Helvetica, Arial, <span class="string">"Microsoft YaHei"</span>, sans-serif;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其中，<code>Helvetica</code>和<code>Arial</code>是西文字体，<code>Microsoft YaHei</code>既包括中文字体又包括西文字体，<code>sans-serif</code>是无衬线体。优先指定西文字体，否则像<code>Microsoft YaHei</code>这样既包含中文又包含西文的字体，会覆盖后面指定的西文字体。确保在<code>font-family list</code>的最后加上<code>generic family name</code>（比如<code>serif</code>，<code>sans-serif</code>，<code>monospace</code>，<code>cursive</code>，<code>fantasy</code>），以防止前面指定的所有字体在计算机中都不存在时没有字体可以显示的情况发生。关于<code>font-family</code>的详情，请参见<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/font-family" target="_blank" rel="external">MDN</a>。</p>
<p>关于<code>font-family</code>的书写：字体名称中如果包含空格，则必须用引号包含，上面提到的<code>generic family names</code>是关键字，不能使用引号包含。我个人习惯使用双引号，且只使用中文字体的英文名称（部分开发设计者中英文名称都写进<code>font-family list</code>里），关于字体的名称，可以在图中红方框的位置看到：<img src="https://ooo.0o0.ooo/2016/10/10/57faed504dc39.png" alt="link"></p>
<h2 id="2-平台字体简介"><a href="#2-平台字体简介" class="headerlink" title="2. 平台字体简介"></a>2. 平台字体简介</h2><h3 id="2-1-Windows"><a href="#2-1-Windows" class="headerlink" title="2. 1 Windows"></a>2. 1 Windows</h3><ul>
<li><code>宋体（SimSun）</code>：Windows下大部分浏览器的默认中文字体，小字号的<code>宋体</code>（如<code>12px</code>、<code>14px</code>）显示结果还可以接受，但是大字号非常差。</li>
<li><code>微软雅黑（Microsoft YaHei）</code>：从 Vista 开始，微软提供了这款新的无衬线黑体类字体，并且拥有Regular、Bold两种粗细的字重，显著提高了字体的显示效果。现在这款字体已经成为Windows浏览器中最值得使用的中文字体。从Win8开始，<code>微软雅黑</code>又加入了Light这款更细的字重，对于喜欢细字体的开发设计者又多了一个新的选择。</li>
<li><code>Arial</code>：Windows平台上默认的无衬线西文字体，有多种变体，显示效果一般。</li>
<li><code>Tahoma</code>：十分常见的无衬线字体，被Windows 2000、Windows XP、Windows Server 2003及Sega游戏主机Dreamcast等系统采用为预设字型，显示效果比Arial要好。</li>
<li>其他预装字体请参见<a href="https://www.microsoft.com/typography/fonts/product.aspx?pid=161" target="_blank" rel="external">Microsoft</a>、<a href="https://en.wikipedia.org/wiki/List_of_typefaces_included_with_Microsoft_Windows" target="_blank" rel="external">Wikipedia</a>。</li>
</ul>
<h3 id="2-2-Mac-OS"><a href="#2-2-Mac-OS" class="headerlink" title="2. 2 Mac OS"></a>2. 2 Mac OS</h3><ul>
<li><code>华文黑体（STHeiti）</code>、<code>华文细黑（STXihei）</code>：属于同一字体族，OS X 10.6 之前的简体中文系统界面默认字体，有Regular和Bold两个字重，显示效果可以接受。</li>
<li><code>黑体-简（Heiti SC）</code>：从OS X 10.6开始，<code>Heiti SC</code>替代<code>STHeiti</code>作为简体中文系统界面默认字体，iPhone、iPad等设备用的也是这款字体，显示效果不错，但是喇叭口设计遭人诟病。</li>
<li><code>冬青黑体（Hiragino Sans GB）</code>：是日文字体<code>Hiragino KakuGothic</code>的简体中文版，简体中文有Regular和Bold两种，冬青黑体是一款清新的专业印刷字体，小字号时足够清晰，被很多人的追捧。</li>
<li><code>Source Han Sans</code>：即<code>思源黑体</code>，由Google和Adobe合作开发，字体族有七个字重，集设计素质、完整字数（对国内使用环境特别重要）和泛用性于一身，是竞争力十分强的一套新设计。</li>
<li><code>Times New Roman</code>：Safari浏览器的默认字体，是最常见且广为人知的西文衬线字体之一，众多网页浏览器和文字处理软件都是用它作为默认字体。</li>
<li><code>Helvetica</code>、<code>Helvetica Neue</code>：苹果生态中最常用的西文字体。<code>Helvetica Neue</code>为<code>Helvetica</code>的改善版本，增加了更多不同粗细与宽度的字形，共拥有51种字体版本，极大的满足了日常的使用。</li>
<li><code>苹方（PingFang SC）</code>：在OS X El Capitan上，苹果为中国用户打造了一款全新中文字体–苹方，去掉了为人诟病的喇叭口，整体造型看上去更加简洁。</li>
<li><code>San Francisco</code>：同样是OS X El Capitan上最新发布的西文字体，和Helvetica看上去差别不大，目前已经应用在Mac OS 10.11+、iOS 9.0+、watch OS等最新系统上。</li>
<li>其他字体请参见<a href="https://support.apple.com/en-us/HT202408" target="_blank" rel="external">Apple</a>、<a href="https://en.wikipedia.org/wiki/List_of_typefaces_included_with_macOS" target="_blank" rel="external">Wikipedia</a>。</li>
</ul>
<h3 id="2-3-Android"><a href="#2-3-Android" class="headerlink" title="2. 3 Android"></a>2. 3 Android</h3><p>原生Android下中西文字体都选择默认的无衬线字体：</p>
<ul>
<li>原生Android4.0之前：西文字体采用<code>Droid Sans</code>，中文字体采用<code>Droid Sans Fallback</code>。关于<code>Droid Sans</code>字体族，<a href="https://www.zhihu.com/question/19946495" target="_blank" rel="external">知乎</a>里有个很不错的回答。</li>
<li>原生Android4.0之后：采用<code>Roboto</code>，下面是Google官方的<code>Roboto</code>介绍：</li>
</ul>
<blockquote>
<p>Google’s signature family of fonts, the default font on Android and Chrome OS, and the recommended font for Google’s visual language, Material Design.</p>
</blockquote>
<h3 id="2-4-iOS"><a href="#2-4-iOS" class="headerlink" title="2. 4 iOS"></a>2. 4 iOS</h3><p>iOS系统的字体和Mac OS系统的字体相同，保证了Mac上的字体效果，iOS设备就没有太大问题。</p>
<ul>
<li>西文字体：iOS 4.0之后使用<code>Helvetica Neue</code>，4.0之前使用<code>Helvetica</code>。</li>
</ul>
<h3 id="2-5-Linux"><a href="#2-5-Linux" class="headerlink" title="2. 5 Linux"></a>2. 5 Linux</h3><ul>
<li><code>文泉驿微米黑（WenQuanYi Micro Hei）</code>：Linux社区现有的最佳简体中文字体</li>
</ul>
<h2 id="3-注意事项"><a href="#3-注意事项" class="headerlink" title="3 注意事项"></a>3 注意事项</h2><ul>
<li>IE font-family fallback bug：在较低版本的IE中（如IE8），只要font-family中某个字体存在，就会完全无视在它之后的字体，缺字用默认字体显示（也就是宋体），请各位注意这一点。</li>
</ul>
<h2 id="4-实际使用"><a href="#4-实际使用" class="headerlink" title="4 实际使用"></a>4 实际使用</h2><p>我自己用的<code>font-family list</code>（针对西文和简体中文）如下：</p>
<p><code>font-family: &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Source Han Sans SC&quot;, &quot;Source Han Sans CN&quot;, &quot;WenQuanYi Micro Hei&quot;, Roboto, &quot;Heiti SC&quot;, &quot;Microsoft YaHei&quot;, &quot;Microsoft JhengHei&quot;, sans-serif;</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;引言：不同的平台（Windows、Mac OS、Linux、Android、iOS）预装的字体各不相同，浏览器默认显示的字体效果也不尽相同。使用CSS的&lt;code&gt;font-family&lt;/code&gt;属性可以指定相应的字体，以便在网页设计中达到较好的字体显示效果。&lt;br&gt;
    
    </summary>
    
    
      <category term="font-family" scheme="https://StephenKingg.github.io/tags/font-family/"/>
    
      <category term="web font" scheme="https://StephenKingg.github.io/tags/web-font/"/>
    
  </entry>
  
  <entry>
    <title>How to integrate Sublime Text 3 with Git and GitHub</title>
    <link href="https://StephenKingg.github.io/2016/05/24/How-to-integrate-Sublime-Text-3-with-Git-and-GitHub/"/>
    <id>https://StephenKingg.github.io/2016/05/24/How-to-integrate-Sublime-Text-3-with-Git-and-GitHub/</id>
    <published>2016-05-24T05:00:58.000Z</published>
    <updated>2017-04-17T15:21:33.176Z</updated>
    
    <content type="html"><![CDATA[<p>资料整理：关于在Sublime Text 3中使用Git的方法<br><a id="more"></a></p>
<h3 id="Step-1-Git的安装与配置"><a href="#Step-1-Git的安装与配置" class="headerlink" title="Step 1: Git的安装与配置"></a>Step 1: Git的安装与配置</h3><ol>
<li><p>从<a href="https://git-scm.com/" target="_blank" rel="external">Git官网</a>获取相应环境的安装文件并安装</p>
</li>
<li><p>在Git的安装目录中打开git-bash.exe,执行以下命令：<br><code>git config --global user.name &quot;username&quot;</code><br><code>git config --global user.email &quot;username@email.com&quot;</code><br>运行后可以使用以下命令查看配置：<br><code>git config -l</code></p>
</li>
<li><p>(可选)配置push.default参数：<br><code>git config --global push.default matching</code><br>在sublime中使用push命令时需要配置push.default参数，在命令行中使用无需配置。<br>push.default参数主要设置执行push命令时的策略，主要选项有：</p>
<ul>
<li>nothing: Do not push anything</li>
<li>matching: Push all matching branches (default)</li>
<li>tracking: Push the current branch to whatever it is tracking</li>
<li>current: Push the current branch</li>
</ul>
</li>
<li><p>在Git Bash中输入<code>ssh-keygen -t rsa</code>，执行命令后提示输入密钥文件路径和文件名，在这里使用默认(/c/Users/yourusername/.ssh/id_rsa)设置，直接按回车。然后提示输入密码，这里使用默认(即没有密码)，然后按两次回车。程序将生成的一对密钥存放在刚才设置的路径下。密钥分为私钥(id_rsa)和公钥(id_rsa.pub)。私钥保存在自己的电脑上，公钥交给项目负责人添加到服务器上。用户必须拥有与服务器公钥所配对的私钥，才能访问服务器上的代码库。<br><strong>【注意】请妥善保管私钥，私钥外泄可能导致服务器上的代码泄漏!</strong></p>
</li>
</ol>
<h3 id="Step-2-连接GitHub"><a href="#Step-2-连接GitHub" class="headerlink" title="Step 2: 连接GitHub"></a>Step 2: 连接GitHub</h3><ol>
<li><p>打开<a href="https://github.com/" target="_blank" rel="external">GitHub</a>主页并登录。</p>
</li>
<li><p>依次选择settings &gt; SSH and GPG keys &gt; New SSH key，添加一个title并将id_rsa.pub中的内容(可以直接拖到sublime中打开)复制到key中，然后点击Add SSH key按钮，即可添加成功。这样就可以使用git连接GitHub了。</p>
</li>
</ol>
<h3 id="Step-3-可选-：-在sublime中添加Git插件"><a href="#Step-3-可选-：-在sublime中添加Git插件" class="headerlink" title="Step 3(可选)： 在sublime中添加Git插件"></a>Step 3(可选)： 在sublime中添加Git插件</h3><ol>
<li><p>利用Package Control安装好Git插件后，依次选择Preferences &gt; Package settings &gt; Git &gt; Setting - Default，将”git_command”中的false修改为cmd路径(这里用”C:/Program Files/Git/git-bash.exe”)。</p>
</li>
<li><p>因本人习惯使用命令行，这里就不介绍sublime中Git插件的使用方法了。</p>
</li>
</ol>
<h3 id="Step-4：-在sublime中添加Terminal插件"><a href="#Step-4：-在sublime中添加Terminal插件" class="headerlink" title="Step 4： 在sublime中添加Terminal插件"></a>Step 4： 在sublime中添加Terminal插件</h3><ol>
<li><p>按照常规方式安装Terminal插件后，依次点击Preferences &gt; Package Settings &gt; Terminal &gt; Settings – Default，为了确保插件升级后配置不丢失，建议将修改的配置都存储到Setting - User中。这里只需在Setting-User中添加以下内容即可：<br><code>{ &quot;terminal&quot;: &quot;C:\\Program Files\\Git\\git-bash.exe&quot; }</code></p>
</li>
<li><p>修改快捷键(个人喜好)，依次点击Preferences &gt; Key Bindings - User，添加以下代码：<br><code>{ &quot;keys&quot;: [&quot;ctrl+alt+t&quot;], &quot;command&quot;: &quot;open_terminal&quot; },</code><br><code>{ &quot;keys&quot;: [&quot;ctrl+shift+t&quot;], &quot;command&quot;: &quot;open_terminal_project_folder&quot; },</code></p>
</li>
</ol>
<h3 id="Step-5：-Git试练"><a href="#Step-5：-Git试练" class="headerlink" title="Step 5： Git试练"></a>Step 5： Git试练</h3><ol>
<li><p>在sublime中，新建一个工作目录，如GitTest，在该目录中新建一个文件(如index.html)并打开，输入一些内容后，打开terminal，输入<code>git init</code>来初始化环境</p>
</li>
<li><p>输入<code>git add index.html</code>来添加新增或修改的文件</p>
</li>
<li><p>输入<code>git commit -m &quot;this is a test&quot;</code>来提交</p>
</li>
<li><p>在GitHub上新建一个与本地工作目录同名的仓库</p>
</li>
<li><p>在terminal中输入<code>git remote add origin git@github.com:yourname/GitTest.git</code></p>
</li>
<li><p>如果执行完上条命令后出现<code>fatal: remote origin already exists</code>，则先执行<code>git remote rm origin</code>，再执行该命令</p>
</li>
<li><p>输入<code>git pull origin master</code>，更新文件</p>
</li>
<li><p>输入<code>git push origin master</code>，提交文件</p>
</li>
<li><p>回到GitHub，刷新查看结果</p>
</li>
</ol>
<h3 id="Step-6：-更多Git教程"><a href="#Step-6：-更多Git教程" class="headerlink" title="Step 6： 更多Git教程"></a>Step 6： 更多Git教程</h3><ol>
<li><p><a href="https://git-scm.com/book/en/v2" target="_blank" rel="external">Pro Git</a></p>
</li>
<li><p><a href="http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html" target="_blank" rel="external">常用Git命令清单</a></p>
</li>
<li><p><a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="external">Git教程 - 廖雪峰</a></p>
</li>
<li><p><a href="https://try.github.io/levels/1/challenges/1" target="_blank" rel="external">tryGit</a></p>
</li>
<li><p><a href="https://www.youtube.com/playlist?list=PLAwxTw4SYaPk8_-6IGxJtD3i2QAu5_s_p" target="_blank" rel="external">How to Use Git and GitHub</a></p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;资料整理：关于在Sublime Text 3中使用Git的方法&lt;br&gt;
    
    </summary>
    
    
      <category term="Sublime Text 3" scheme="https://StephenKingg.github.io/tags/Sublime-Text-3/"/>
    
      <category term="Git" scheme="https://StephenKingg.github.io/tags/Git/"/>
    
      <category term="GitHub" scheme="https://StephenKingg.github.io/tags/GitHub/"/>
    
  </entry>
  
  <entry>
    <title>使用Hexo和GitHub Pages搭建个人博客</title>
    <link href="https://StephenKingg.github.io/2016/05/24/%E4%BD%BF%E7%94%A8Hexo%E5%92%8CGitHub-Pages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>https://StephenKingg.github.io/2016/05/24/使用Hexo和GitHub-Pages搭建个人博客/</id>
    <published>2016-05-24T04:59:40.000Z</published>
    <updated>2017-04-30T03:41:34.941Z</updated>
    
    <content type="html"><![CDATA[<p>资料整理：关于个人博客搭建。<br><a id="more"></a></p>
<h3 id="Step-1-创建仓库"><a href="#Step-1-创建仓库" class="headerlink" title="Step 1: 创建仓库"></a>Step 1: 创建仓库</h3><ol>
<li><p>在GitHub中新建两个repository，分别命名为<code>username.github.io</code>和<code>blog</code>。前者用于存放deploy之后产生的文件，后者用于存放Hexo源文件。这里需要说明的是：</p>
<ul>
<li>GitHub Pages有两种类型：User/Organization Pages 和 Project Pages。</li>
<li>用于存放User Pages的仓库必须使用username.github.io的命名规则，而Project Pages没有特殊要求。</li>
<li>User Pages将使用仓库的master分支，而Project Pages将使用gh-pages分支。</li>
<li>User Pages通过http(s)://username.github.io进行访问，而Project Pages通过http(s)://username.github.io/projectname进行访问。</li>
</ul>
</li>
<li><p>详细内容请访问<a href="https://help.github.com/articles/user-organization-and-project-pages/" target="_blank" rel="external">GitHub Pages Basics</a>。</p>
</li>
</ol>
<h3 id="Step-2-安装Hexo"><a href="#Step-2-安装Hexo" class="headerlink" title="Step 2: 安装Hexo"></a>Step 2: 安装Hexo</h3><ol>
<li><p>安装Hexo之前，请确保计算机中已安装<code>Git</code>和<code>Node.js</code>，并且已配置了相应GitHub账号的ssh-key，可以参考我的教程：<a href="https://stephenkingg.github.io/">How to integrate Sublime Text 3 with Git and GitHub</a>。</p>
</li>
<li><p>执行以下命令即可完成Hexo的安装：<br><code>npm install hexo-cli -g</code></p>
</li>
</ol>
<h3 id="Step-3-搭建本地Hexo博客"><a href="#Step-3-搭建本地Hexo博客" class="headerlink" title="Step 3: 搭建本地Hexo博客"></a>Step 3: 搭建本地Hexo博客</h3><ol>
<li><p>在本地新建一个文件夹(例如D:\blog)，进入该文件夹，鼠标右击选择Git Bash Here，输入<code>hexo init</code>，该命令会在目标文件夹中建立网站所需要的所有文件。</p>
</li>
<li><p>在Git Bash中输入<code>npm install</code>，安装依赖包。这样我们就搭建起了本地Hexo博客。在Git Bash中输入<code>hexo server</code>，然后在浏览器中输入<code>http://localhost:4000/</code>，即可在本地浏览。</p>
</li>
</ol>
<h3 id="Step-4-将Hexo部署到GitHub"><a href="#Step-4-将Hexo部署到GitHub" class="headerlink" title="Step 4: 将Hexo部署到GitHub"></a>Step 4: 将Hexo部署到GitHub</h3><ol>
<li><p>打开该文件夹下的_config.yml文件，找到：<br><code>deploy:</code><br><code>type:</code><br>作以下修改：<br><code>deploy:</code><br><code>type: git</code><br><code>repo: git@github.com:username/username.github.io.git</code><br><code>branch: master</code>(User Pages为master， Project Pages为gh-pages)</p>
</li>
<li><p>执行以下命令，安装deploy插件：<br><code>npm install hexo-deployer-git --save</code></p>
</li>
<li><p>执行以下命令，即可完成部署：<br><code>hexo d -g</code></p>
</li>
<li><p>在浏览器中输入<code>username.github.io</code>进行浏览。</p>
</li>
</ol>
<h3 id="Step-5-更改Hexo的主题"><a href="#Step-5-更改Hexo的主题" class="headerlink" title="Step 5: 更改Hexo的主题"></a>Step 5: 更改Hexo的主题</h3><ol>
<li><p>如果想使用其它主题，可以在Git Bash中执行以下命令：<br><code>git clone git@github.com:someone/theme-name themes/theme-name</code></p>
</li>
<li><p>然后打开_config.yml文件，将<code>theme: landscape</code>修改为<code>theme: theme-name</code>，然后在Git Bash中执行以下命令：<br><code>hexo clean</code><br><code>hexo d -g</code></p>
</li>
<li><p>在浏览器中刷新页面看看效果~</p>
</li>
<li><p>关于Hexo主题的配置，请参考其它教程，这里就不详述了。</p>
</li>
</ol>
<h3 id="Step-6-将Hexo源文件上传到GitHub"><a href="#Step-6-将Hexo源文件上传到GitHub" class="headerlink" title="Step 6: 将Hexo源文件上传到GitHub"></a>Step 6: 将Hexo源文件上传到GitHub</h3><ol>
<li><p>在Git Bash中依次执行以下命令：<br><code>git init</code><br><code>git remote add origin git@github.com:username/blog.git</code><br><code>git add -A</code><br><code>git commit -a</code><br><code>git pull origin master</code><br><code>git push origin master</code></p>
</li>
<li><p>这样就完成了文件上传。这里需要注意的是，clone下来的主题文件夹中(如themes/xxx/)，如果有<code>.git</code>目录，请先删除该目录，然后执行以上命令，否则该主题中的文件无法上传。</p>
</li>
</ol>
<h3 id="Step-7-在另一台计算机中同步Hexo博客"><a href="#Step-7-在另一台计算机中同步Hexo博客" class="headerlink" title="Step 7: 在另一台计算机中同步Hexo博客"></a>Step 7: 在另一台计算机中同步Hexo博客</h3><ol>
<li><p>安装Git和Node.js，并配置GitHub账号的ssh-key。</p>
</li>
<li><p>任意选择一个文件夹，使用Git Bash执行以下命令：<br><code>git clone git@github.com:username/blog.git</code><br><code>cd blog/</code><br><code>npm install hexo-cli -g</code><br><code>npm install</code><br><code>npm install hexo-deployer-git</code><br><code>hexo clean</code><br><code>hexo generate</code><br><code>hexo server</code><br>在浏览器中打开<code>http://localhost:4000/</code>就可以看到页面了</p>
</li>
</ol>
<h3 id="Step-8-日常改动"><a href="#Step-8-日常改动" class="headerlink" title="Step 8: 日常改动"></a>Step 8: 日常改动</h3><ol>
<li><p>建议先检查更新，将本地文件更新至最新版本：<br><code>git pull</code></p>
</li>
<li><p>然后执行新建、修改等操作。</p>
</li>
<li><p>操作完成后，将文件同步至GitHub：<br><code>git add xxx</code><br><code>git commit -m &quot;descriptions&quot;</code><br><code>git push origin master</code></p>
</li>
<li><p>然后再执行Hexo的生成文件和部署命令：<br><code>hexo d -g</code></p>
</li>
</ol>
<h3 id="Step-9-关于Hexo"><a href="#Step-9-关于Hexo" class="headerlink" title="Step 9: 关于Hexo"></a>Step 9: 关于Hexo</h3><ul>
<li>关于Hexo的更多内容请访问<a href="https://hexo.io/" target="_blank" rel="external">Hexo官网</a>。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;资料整理：关于个人博客搭建。&lt;br&gt;
    
    </summary>
    
    
      <category term="Hexo" scheme="https://StephenKingg.github.io/tags/Hexo/"/>
    
      <category term="Github Pages" scheme="https://StephenKingg.github.io/tags/Github-Pages/"/>
    
  </entry>
  
</feed>
